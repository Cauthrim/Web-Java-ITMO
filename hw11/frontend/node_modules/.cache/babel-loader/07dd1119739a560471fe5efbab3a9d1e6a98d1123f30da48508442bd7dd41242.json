{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n    this.comments = [];\n  },\n  beforeCreate: function () {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onRegister\", (login, name) => {\n      login = login.trim();\n      name = name.trim();\n      if (!name) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Name must not be empty\");\n      } else if (!login) {\n        this.$root.$emit(\"onRegisterValidationError\", \"Login must not be empty\");\n      } else {\n        axios.post(\"/api/1/users\", {\n          login,\n          name\n        }).then(response => {\n          axios.get(\"/api/1/users\").then(response => {\n            this.users = response.data;\n          });\n          this.$root.$emit(\"onJwt\", response.data);\n        }).catch(error => {\n          this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n        });\n      }\n    });\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.user != null) {\n        title = title.trim();\n        text = text.trim();\n        const userId = this.user.id;\n        if (!title) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title must not be empty\");\n        } else if (!text) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text must not be empty\");\n        } else {\n          axios.post(\"/api/1/posts\", {\n            title,\n            text,\n            userId\n          }).then(function () {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n            this.$root.$emit(\"onChangePage\", \"Index\");\n          }).catch(error => {\n            this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n  }\n};","map":{"version":3,"mappings":"AASA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA;IAEAC;MACA;IACA;IAEAA;MACA;IACA;IAEA;EACA;EACAC;IACA;MACA;QACA;QACA;MACA;MAEAD;QACAE;QAAAC;MACA;QACAC;QACA;MACA;QACA;MACA;IACA;IAEA;MACAA;MAEAJ;QACAK;UACAC;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;MACAJ;MACAX;MACA;QACA;MACA;QACA;MACA;QACAS;UAAAE;UAAAX;QAAA;UACAS;YACA;UACA;UACA;QACA;UACA;QACA;MACA;IACA;IAEA;MACA;QACAO;QACAC;QACA;QACA;UACA;QACA;UACA;QACA;UACAR;YAAAO;YAAAC;YAAAC;UAAA;YACAT;cACA;YACA;YACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;IAEA;MACAI;MACA;IACA;EAEA;AACA","names":["name","components","Footer","Middle","Header","data","user","posts","beforeMount","axios","beforeCreate","login","password","localStorage","params","jwt","title","text","userId"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :posts=\"posts\" :users=\"users\" :comments=\"comments\"/>\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return {\n            user: null,\n            posts: []\n        }\n    },\n    beforeMount() {\n        if (localStorage.getItem(\"jwt\") && !this.user) {\n            this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n        }\n\n        axios.get(\"/api/1/posts\").then(response => {\n            this.posts = response.data;\n        });\n\n        axios.get(\"/api/1/users\").then(response => {\n            this.users = response.data;\n        });\n\n        this.comments = [];\n    },\n    beforeCreate: function () {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            axios.post(\"/api/1/jwt\", {\n                login, password\n            }).then(response => {\n                localStorage.setItem(\"jwt\", response.data);\n                this.$root.$emit(\"onJwt\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onEnterValidationError\", error.response.data);\n            });\n        });\n\n        this.$root.$on(\"onJwt\", (jwt) => {\n            localStorage.setItem(\"jwt\", jwt);\n\n            axios.get(\"/api/1/users/auth\", {\n                params: {\n                    jwt\n                }\n            }).then(response => {\n                this.user = response.data;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }).catch(() => this.$root.$emit(\"onLogout\"))\n        });\n\n        this.$root.$on(\"onRegister\", (login, name) => {\n            login = login.trim();\n            name = name.trim();\n            if (!name) {\n                this.$root.$emit(\"onRegisterValidationError\", \"Name must not be empty\");\n            } else if (!login) {\n                this.$root.$emit(\"onRegisterValidationError\", \"Login must not be empty\");\n            } else {\n                axios.post(\"/api/1/users\", {login, name}).then(response => {\n                    axios.get(\"/api/1/users\").then(response => {\n                        this.users = response.data;\n                    })\n                    this.$root.$emit(\"onJwt\", response.data);\n                }).catch(error => {\n                    this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n                });\n            }\n        });\n\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.user != null) {\n                title = title.trim();\n                text = text.trim();\n                const userId = this.user.id;\n                if (!title) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title must not be empty\");\n                } else if (!text) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text must not be empty\");\n                } else {\n                    axios.post(\"/api/1/posts\", {title, text, userId}).then(function () {\n                        axios.get(\"/api/1/posts\").then(response => {\n                            this.posts = response.data;\n                        })\n                        this.$root.$emit(\"onChangePage\", \"Index\");\n                    }).catch(error => {\n                        this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n                    });\n                }\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n\n        this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"jwt\");\n            this.user = null;\n        });\n\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}