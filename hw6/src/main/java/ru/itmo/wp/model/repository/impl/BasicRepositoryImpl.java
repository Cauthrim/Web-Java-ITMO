package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.DomainObject;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.domain.Parameter;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;

public class BasicRepositoryImpl {
    private static final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public static ResultSetData findBy(String classType, String paramName, Object param) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + classType + " WHERE "
                    + paramName + "=?")) {
                statement.setObject(1, param);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return new ResultSetData(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + classType + ".", e);
        }
    }

    public DomainObject save(DomainObject object, ArrayList<Parameter> params, String classType) {
        StringBuilder builder = new StringBuilder();
        StringBuilder secondaryBuilder = new StringBuilder();
        builder.append("INSERT INTO `").append(classType).append("` (");
        for (Parameter param : params) {
            builder.append("`");
            builder.append(param.getName());
            if (param.getName().equals("creationTime")) {
                secondaryBuilder.append("NOW(), ");
            } else {
                secondaryBuilder.append("?, ");
            }
            builder.append("`");
            builder.append(", ");
        }
        builder.delete(builder.lastIndexOf(", "), builder.lastIndexOf(", ") + 2);
        secondaryBuilder.delete(secondaryBuilder.lastIndexOf(", "), secondaryBuilder.lastIndexOf(", ") + 2);
        builder.append(") VALUES (");
        builder.append(secondaryBuilder);
        builder.append(")");
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    builder.toString(),
                    Statement.RETURN_GENERATED_KEYS
            )) {
                int ind = 1;
                for (Parameter param : params) {
                    if (!param.getName().equals("creationTime")) {
                        statement.setObject(ind++, param.getValue());
                    }
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + classType + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        long id = generatedKeys.getLong(1);
                        object.setId(id);
                        ResultSetData resultSetData = findBy(classType, "id", id);
                        ResultSetMetaData metaData = resultSetData.getResultSetMetaData();
                        ResultSet resultSet = resultSetData.getResultSet();
                        if (!resultSet.next()) {
                            throw new RepositoryException("Can't save " + classType + " [no autogenerated fields].");
                        }
                        for (int i = 1; i <= metaData.getColumnCount(); i++) {
                            if (metaData.getColumnName(i).equals("creationTime")) {
                                object.setCreationTime(resultSet.getTimestamp(i));
                            }
                        }
                    } else {
                        throw new RepositoryException("Can't save " + classType + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + classType + ".", e);
        }

        return object;
    }
}
